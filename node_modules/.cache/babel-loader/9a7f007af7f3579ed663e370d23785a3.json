{"ast":null,"code":"var _jsxFileName = \"/Users/analiario/Desktop/Adalab/Ejercicios/Evaluaciones/Mo\\u0301dulo 3 - Evaluacio\\u0301n final/modulo-3-evaluacion-final-AnaliaRio/src/components/App.js\",\n    _s = $RefreshSig$();\n\n// ---------- IMPORTS ----------\n// Dependencies\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { matchPath, useLocation } from \"react-router\"; // Styles\n\nimport \"../styles/App.scss\"; // Services\n\nimport getApiData from \"../services/wowApi\";\nimport ls from \"../services/localStorage\"; // Components\n\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport MovieSceneDetail from \"./MovieSceneDetail\";\nimport Footer from \"./Footer\";\nimport NotFoundPage from \"./NotFoundPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // ---------- STATE VARIABLES ----------\n  const [movieScenes, setMovieScenes] = useState(ls.get(\"lsMovieScenes\", []));\n  const [filterYear, setFilterYear] = useState(0);\n  const [filterMovie, setFilterMovie] = useState(\"\");\n  const [filterTotalWow, setFilterTotalWow] = useState(0); // ---------- HOOK TO GET API DATA ----------\n\n  useEffect(() => {\n    if (movieScenes.length === 0) {\n      getApiData().then(apiData => {\n        setMovieScenes(apiData);\n      });\n    }\n  }, []); // ---------- HOOK FOR LOCAL STORAGE ----------\n  // Save data in local storage with useEffect so that local storage stays updated after changing\n  // Read local storage data and save it in useState so that they are available upon opening the page\n\n  useEffect(() => {\n    ls.set(\"lsMovieScenes\", movieScenes);\n  }, [movieScenes, filterMovie]); // ---------- FUNCTION --> HANDLE MOVIE FILTER ----------\n\n  const handleFilterMovie = value => {\n    setFilterMovie(value);\n  }; // ---------- FUNCTION --> HANDLE YEAR FILTER ----------\n\n\n  const handleFilterYear = value => {\n    setFilterYear(parseInt(value));\n  }; // The value needs to be parsed to match the type of value given by the API (number)\n  // ---------- FUNCTION --> HANDLE TOTAL WOW FILTER ----------\n\n\n  const handleFilterTotalWow = value => {\n    setFilterTotalWow(parseInt(value));\n  }; // ----- CONSANT SAVING THE FILTERED SCENE LIST  -----\n\n\n  const movieSceneFilters = movieScenes // ---------- METHOD --> FILTER BY MOVIE ----------\n  .filter(movie => {\n    return movie.movie.toLowerCase().includes(filterMovie.toLowerCase());\n  }) // ---------- METHOD --> FILTER BY TOTAL WOW ----------\n  .filter(movie => {\n    console.log(filterTotalWow, movie.wow);\n    return filterTotalWow === 0 ? true : movie.wow === parseInt(filterTotalWow);\n  }) // ---------- METHOD --> FILTER BY YEAR ----------\n  .filter(movie => {\n    return filterYear === 0 ? true : movie.year === filterYear;\n  }); // ---------- FUNCTION TO NOT REPEAT YEARS ----------\n\n  const getYear = () => {\n    const movieYear = movieScenes.map(oneYear => oneYear.year);\n    const unrepeatedYear = movieYear.filter((movie, index) => {\n      return movieYear.indexOf(movie) === index;\n    });\n    return unrepeatedYear;\n  }; // -------------------- ROUTES --------------------\n\n\n  const {\n    pathname\n  } = useLocation();\n  const dataPath = matchPath(\"/movie/:movieId\", pathname); // console.log(dataPath);\n\n  const movieId = dataPath !== null ? dataPath.params.movieId : null;\n  const movieFound = movieScenes.find(movie => movie.id === parseInt(movieId)); // console.log(movieId);\n  // console.log(movieFound);\n  // -------------------- RETURN --------------------\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Filters, {\n              handleFilterMovie: handleFilterMovie,\n              filterMovie: filterMovie,\n              handleFilterTotalWow: handleFilterTotalWow,\n              filterTotalWow: filterTotalWow,\n              handleFilterYear: handleFilterYear,\n              year: getYear()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MovieSceneList, {\n              movieScenes: movieSceneFilters\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/movie/:movieId\",\n        element: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MovieSceneDetail, {\n              movie: movieFound\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(NotFoundPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"W8HcppAs4593nsiKhDmzbif+EUY=\", false, function () {\n  return [useLocation];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Routes","Route","matchPath","useLocation","getApiData","ls","Header","Filters","MovieSceneList","MovieSceneDetail","Footer","NotFoundPage","App","movieScenes","setMovieScenes","get","filterYear","setFilterYear","filterMovie","setFilterMovie","filterTotalWow","setFilterTotalWow","length","then","apiData","set","handleFilterMovie","value","handleFilterYear","parseInt","handleFilterTotalWow","movieSceneFilters","filter","movie","toLowerCase","includes","console","log","wow","year","getYear","movieYear","map","oneYear","unrepeatedYear","index","indexOf","pathname","dataPath","movieId","params","movieFound","find","id"],"sources":["/Users/analiario/Desktop/Adalab/Ejercicios/Evaluaciones/Módulo 3 - Evaluación final/modulo-3-evaluacion-final-AnaliaRio/src/components/App.js"],"sourcesContent":["// ---------- IMPORTS ----------\n\n// Dependencies\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { matchPath, useLocation } from \"react-router\";\n\n// Styles\nimport \"../styles/App.scss\";\n\n// Services\nimport getApiData from \"../services/wowApi\";\nimport ls from \"../services/localStorage\";\n\n// Components\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport MovieSceneDetail from \"./MovieSceneDetail\";\nimport Footer from \"./Footer\";\nimport NotFoundPage from \"./NotFoundPage\";\n\nfunction App() {\n  // ---------- STATE VARIABLES ----------\n  const [movieScenes, setMovieScenes] = useState(ls.get(\"lsMovieScenes\", []));\n  const [filterYear, setFilterYear] = useState(0);\n  const [filterMovie, setFilterMovie] = useState(\"\");\n  const [filterTotalWow, setFilterTotalWow] = useState(0);\n\n  // ---------- HOOK TO GET API DATA ----------\n  useEffect(() => {\n    if (movieScenes.length === 0) {\n      getApiData().then((apiData) => {\n        setMovieScenes(apiData);\n      });\n    }\n  }, []);\n\n  // ---------- HOOK FOR LOCAL STORAGE ----------\n  // Save data in local storage with useEffect so that local storage stays updated after changing\n  // Read local storage data and save it in useState so that they are available upon opening the page\n  useEffect(() => {\n    ls.set(\"lsMovieScenes\", movieScenes);\n  }, [movieScenes, filterMovie]);\n\n  // ---------- FUNCTION --> HANDLE MOVIE FILTER ----------\n  const handleFilterMovie = (value) => {\n    setFilterMovie(value);\n  };\n\n  // ---------- FUNCTION --> HANDLE YEAR FILTER ----------\n  const handleFilterYear = (value) => {\n    setFilterYear(parseInt(value));\n  };\n  // The value needs to be parsed to match the type of value given by the API (number)\n\n  // ---------- FUNCTION --> HANDLE TOTAL WOW FILTER ----------\n  const handleFilterTotalWow = (value) => {\n    setFilterTotalWow(parseInt(value));\n  };\n\n  // ----- CONSANT SAVING THE FILTERED SCENE LIST  -----\n  const movieSceneFilters = movieScenes\n\n    // ---------- METHOD --> FILTER BY MOVIE ----------\n    .filter((movie) => {\n      return movie.movie.toLowerCase().includes(filterMovie.toLowerCase());\n    })\n\n    // ---------- METHOD --> FILTER BY TOTAL WOW ----------\n    .filter((movie) => {\n      console.log(filterTotalWow, movie.wow);\n      return filterTotalWow === 0\n        ? true\n        : movie.wow === parseInt(filterTotalWow);\n    })\n\n    // ---------- METHOD --> FILTER BY YEAR ----------\n    .filter((movie) => {\n      return filterYear === 0 ? true : movie.year === filterYear;\n    });\n\n  // ---------- FUNCTION TO NOT REPEAT YEARS ----------\n  const getYear = () => {\n    const movieYear = movieScenes.map((oneYear) => oneYear.year);\n\n    const unrepeatedYear = movieYear.filter((movie, index) => {\n      return movieYear.indexOf(movie) === index;\n    });\n\n    return unrepeatedYear;\n  };\n\n  // -------------------- ROUTES --------------------\n  const { pathname } = useLocation();\n  const dataPath = matchPath(\"/movie/:movieId\", pathname);\n  // console.log(dataPath);\n\n  const movieId = dataPath !== null ? dataPath.params.movieId : null;\n  const movieFound = movieScenes.find(\n    (movie) => movie.id === parseInt(movieId)\n  );\n  // console.log(movieId);\n  // console.log(movieFound);\n\n  // -------------------- RETURN --------------------\n  return (\n    <>\n      <Routes>\n        <Route\n          path='/'\n          element={\n            <>\n              <div className='container'>\n                <Header />\n                <Filters\n                  handleFilterMovie={handleFilterMovie}\n                  filterMovie={filterMovie}\n                  handleFilterTotalWow={handleFilterTotalWow}\n                  filterTotalWow={filterTotalWow}\n                  handleFilterYear={handleFilterYear}\n                  year={getYear()}\n                />\n                <MovieSceneList movieScenes={movieSceneFilters} />\n              </div>\n              <Footer />\n            </>\n          }\n        />\n        <Route\n          path='/movie/:movieId'\n          element={\n            <>\n              <div className='container'>\n                <Header />\n                <MovieSceneDetail movie={movieFound} />\n              </div>\n              <Footer />\n            </>\n          }\n        />\n        <Route path='*' element={<NotFoundPage />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}